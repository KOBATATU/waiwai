datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

generator zod {
  provider       = "zod-prisma-types"
  useMultipleFiles                 = false // default is false
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is true
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = false // default is true
  coerceDate                       = false // default is true
  writeNullishInModelTypes         = true // default is false
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  competitionParticipates CompetitionParticipate[]
  teamMembers TeamMember[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}


model Competition {
  id                    String                 @id @default(uuid())
  title                 String                 @db.VarChar(100) /// @zod.string({ required_error: "required" }).max(100, { message: "Please enter less than 100 characters" })
  subtitle              String                 @db.VarChar(500) /// @zod.string({ required_error: "required" }).max(500, { message: "Please enter less than 500 characters" })
  description           String                 @db.Text /// @zod.string({ required_error: "required" })
  dataDescription       String                 @db.Text @map("data_description") /// @zod.string({ required_error: "required" })
  thumbnail             String?                 @db.VarChar(255)
  startDate             DateTime               @db.Timestamptz() @map("start_date") /// @zod.date({ required_error: "required" })
  endDate               DateTime               @db.Timestamptz() @map("end_date") /// @zod.date({ required_error: "required" })
  open                  Boolean                
  evaluationFunc        String                 @db.VarChar(20) @map("evaluation_func") /// @zod.string({ required_error: "required" }).max(20, { message: "Please enter less than 20 characters" })
  problem               String                 @db.VarChar(20) /// @zod.string({ required_error: "required" }).max(20, { message: "Please enter less than 20 characters" })
  limitSubmissionNum    Int                    @map("limit_submission_num") /// @zod.number({ required_error: "required" })
  createdAt             DateTime               @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt             DateTime               @default(now()) @db.Timestamptz() @map("updated_at")

  competitionDatas      CompetitionData[]
  competitionParticipates CompetitionParticipate[]
  teams CompetitionTeam[]
}

model CompetitionData {
  id             String       @id @default(uuid())
  competitionId  String       @map("competition_id") /// @zod.string({ required_error: "required" })
  dataPath       String       @db.VarChar(255) @map("data_path") /// @zod.string({ required_error: "required" }).max(255, { message: "Please enter less than 255 characters" })
  createdAt      DateTime     @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt      DateTime     @default(now()) @db.Timestamptz() @map("updated_at")

  competition    Competition  @relation(fields: [competitionId], references: [id])
}

model CompetitionParticipate {
  id             String       @id @default(uuid())
  competitionId  String       @map("competition_id") /// @zod.string({ required_error: "required" })
  userId         String       @map("user_id") /// @zod.string({ required_error: "required" })
  createdAt      DateTime     @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt      DateTime     @default(now()) @db.Timestamptz() @map("updated_at")
  
  competition    Competition  @relation(fields: [competitionId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, competitionId])
}

model CompetitionTeam {
  id             String       @id @default(uuid())
  competitionId  String       @map("competition_id") /// @zod.string({ required_error: "required" })
  name           String       @db.VarChar(255) /// @zod.string({ required_error: "required" }).max(255, { message: "Please enter less than 255 characters" })
  resultPublicOrder   Int?    @map("result_public_order")
  resultPrivateOrder  Int?    @map("result_private_order")
  createdAt           DateTime @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt           DateTime @default(now()) @db.Timestamptz() @map("updated_at")

  competition Competition @relation(fields: [competitionId], references: [id])

  teamMembers TeamMember[]
}

model TeamMember {
  id             String       @id @default(uuid())
  teamId         String       @map("team_id") /// @zod.string({ required_error: "required" })
  userId         String       @map("user_id") /// @zod.string({ required_error: "required" })
  createdAt      DateTime     @default(now()) @db.Timestamptz() @map("created_at")
  updatedAt      DateTime     @default(now()) @db.Timestamptz() @map("updated_at")

  team CompetitionTeam @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
